#!/bin/bash
#this script normalizes all mp3 file in a given directory, to max volume = 0 dB

SAVEIFS=$IFS

orig_dir=$1
#echo $orig_dir
target_dir=$2
#echo $target_dir

# get all the files recursively in the directory which shall be normalized
IFS=$'\n'
filefilter=$(find $orig_dir \( -name '*.mp3' \))
declare -a filelist
for mp3file in $filefilter; do
	filelist+=("$mp3file")
	echo $mp3file
done
echo ${filelist[@]}
IFS=$SAVEIFS
#echo $filefilter

# remove prious run result
rm mp3_normalize_log.txt
rm original*.*
rm result*.*

# internal counter
song_num=1

# for each file
for mp3file in "${filelist[@]}"; do

	echo ""

	# get the filename from the path
	mp3filename=$(basename "$mp3file")
	
	mp3path=${mp3file#$orig_dir}
	mp3path=${mp3path%$mp3filename}
	echo "file:$mp3file"
	echo "mp3path:$mp3path"
	echo "orig_dir:$orig_dir"
	
	IFS='/' 
	read -r -a dirarray <<< "$mp3path"
	echo "The path array is:${dirarray[*]}"
	bdir=$target_dir
	for adir in "${dirarray[@]}"; do
		if [ ! $adir == "" ]; then
			bdir=$bdir/$adir
			if [ ! -d "$bdir" ]; then
				echo "Creating directory: $bdir"
				mkdir "$bdir"
			fi
		fi
	done
	IFS=$SAVEIFS
	
	cp "$mp3file" ./tmp.mp3
	
	#mp3file='"'$mp3file'"'
	#echo $mp3file
	
	# print filename
	echo "($song_num) File:  $mp3filename"
	
	# detect maximum value
	#ffmpeg -i "$mp3file" -af volumedetect -f null -y nul &> "original_$song_num.txt"
	ffmpeg -y -i "./tmp.mp3" -ab 576k -pass 1 -filter:a loudnorm=print_format=json -f mp3 nul &> "original_$song_num.txt"
	
	# get values
	grep -E "input_i|input_lra|input_tp|input_thresh" "original_$song_num.txt" &> original1.tmp
	grep -E "input_i|input_lra|input_tp|input_thresh" "original_$song_num.txt"
	sed -i 's|: -|=|' original1.tmp
	
	# copy the line to a temp file
	grep "input_i" original1.tmp > original2.tmp
	# cut out the value, result can contain : or =
	sed -i 's/^.*= //' original2.tmp
	sed -i 's/^.*: //' original2.tmp
	input_i=$(cat "./original2.tmp")
	input_i=${input_i//[$'\t\r\n,"']}
	#echo $input_i
	
	# copy the line to a temp file
	grep "input_lra" original1.tmp > original2.tmp
	# cut out the value, result can contain : or =
	sed -i 's/^.*= //' original2.tmp
	sed -i 's/^.*: //' original2.tmp
	input_lra=$(cat "./original2.tmp")
	input_lra=${input_lra//[$'\t\r\n,"']}
	#echo $input_lra
	
	# copy the line to a temp file
	grep "input_tp" original1.tmp > original2.tmp
	# cut out the value, result can contain : or =
	sed -i 's/^.*= //' original2.tmp
	sed -i 's/^.*: //' original2.tmp
	input_tp=$(cat "./original2.tmp")
	input_tp=${input_tp//[$'\t\r\n,"']}
	#echo $input_tp
	
	# copy the line to a temp file
	grep "input_thresh" original1.tmp > original2.tmp
	# cut out the value, result can contain : or =
	sed -i 's/^.*= //' original2.tmp
	sed -i 's/^.*: //' original2.tmp
	input_thresh=$(cat "./original2.tmp")
	input_thresh=${input_thresh//[$'\t\r\n,"']}
	#echo $input_thresh
	
	#get original bitrate
	bit=`ffmpeg -i "./tmp.mp3" 2>&1 | grep Audio | awk -F", " '{print $5}' | cut -d' ' -f1`
	echo "bitrate: $bit"

	# make the conversion
	ffmpeg -y -i "./tmp.mp3" -ab ${bit}k -pass 2 -filter:a loudnorm=linear=false:measured_I=$input_i:measured_LRA=$input_lra:measured_tp=$input_tp:measured_thresh=$input_thresh:print_format=json -f mp3 "./$mp3filename" &> "result_$song_num.txt"
	grep -E "output_i|output_lra|output_tp|output_thresh" "result_$song_num.txt"

	mv "$mp3filename" "$target_dir$mp3path"

	#increae internal counter
	let song_num=$song_num+1
done